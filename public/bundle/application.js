"use strict";var ou3=angular.module("ou3",["ngTouch","ngAnimate"]);ou3.factory("placer",[function(){function e(e,o){for(var t={},n=0,a=o.length;a>n;n++){var r=$.grep(e,function(e,t){return e.types[0]==o[n]});r.length&&(t[o[n]]=r[0].long_name)}return t}var o=function(o){return level_codes=["neighborhood","route","postal_code","postal_code_suffix","locality","sublocality_level_1","administrative_area_level_1","administrative_area_level_2"],e(o,level_codes)};return{extract:o}}]),ou3.factory("brooxMap",["$q","$window",function(e,o){function t(){i.resolve(!0)}function n(e){var o={center:p,zoom:15,disableDefaultUI:!0,mapTypeControl:!0,mapTypeControlOptions:{style:l.maps.MapTypeControlStyle.DROPDOWN_MENU},streetViewControl:!0};s=new l.maps.Map(e,o),u.resolve(),r()}function a(e){p=e,s&&(s.setCenter(p),r())}function r(){c&&c.setMap(null),c=new l.maps.Marker({position:p,map:s,animation:l.maps.Animation.DROP,title:"You are Here"})}var l=o.google,i=e.defer(),u=e.defer(),p={lat:40.216339,lng:-74.741427},s=null,c=null;return l.maps.event.addDomListener(o,"load",t),{loadGoogle:i.promise,mapLoaded:u.promise,google:l,initMap:n,updateMap:a,LatLng:l.maps.LatLng,getMarker:function(){return c},getMap:function(){return s}}}]);
"use strict";ou3.controller("DataController",["$scope","placer","brooxMap","$window",function(o,e,n,t){o.mapLoaded=!1,o.area={},o.$on("geocode",function(n,t){o.area=e.extract(t),o.$apply()}),o.toggleMiniLock=function(){console.log("toggling"),o.$emit("toggle_mini_lock")},o.handleUpdatePosition=function(){console.log("handleUpdatePosition Called",arguments,Date.now()),o.$emit("update_position")},o.reload=function(){t.location.reload()},n.mapLoaded.then(function(e){o.mapLoaded=!0})}]);
"use strict";ou3.controller("MainController",["$scope","$window","brooxMap",function(o,n,t){function i(n){n.length&&n[0].address_components&&o.$broadcast("geocode",n[0].address_components)}n.navigator.geolocation||alert("This isn't gonna work out :/");var e=new t.google.maps.Geocoder,a=document.querySelector("#map-canvas");o.miniLock=!1,o.$on("toggle_mini_lock",function(n){o.miniLock=!o.miniLock}),o.position={lat:40.216339,lng:-74.741427},o.updatePosition=function(){console.log("update position called"),n.navigator.geolocation.getCurrentPosition(function(n){o.position=new t.LatLng(n.coords.latitude,n.coords.longitude),t.updateMap(o.position),e.geocode({latLng:o.position},i)})},o.$on("update_position",o.updatePosition),t.loadGoogle.then(function(){t.initMap(a),o.updatePosition()})}]);
//# sourceMappingURL=data:application/json;base64,
